/*    ПРОГРАММА ДЛЯ УПРАВЛЕНИЯ ДЕЛЬТА-МАНИПУЛЯТОРОМ
 *     
 *    Управление ведется при помощи дистанционного пульта.
 *    Кнопка R на пульте - перемещение по оси X вправо, кнопка L - влево
 *    U - по оси Y вперед, D - по оси Y назад. Кнопка 1 для перемещения по 
 *    оси Z вверх а кнопка 2 для перемещения по оси Z вниз. Одновременное 
 *    нажати кнопок 1 и 4 включает демо-режим. Кнопка 5 включает присоску.
 *    Кнопка 6 отлючает присоску.
 */


#include <actuator.h>
#include <Dynamixel2Arduino.h> // Библиотека для управления приводами
#include <RC100.h> // Библиотека для работы с модулем дистанционного управления
//#include <TrackingCamDxl.h>

// Переменные для работы с модулем дистанционного управления
RC100 RemoteController;
int RcvData = 0;
#define RC100_BTN_U (1)
#define RC100_BTN_D (2)
#define RC100_BTN_L (4)
#define RC100_BTN_R (8)
#define RC100_BTN_1 (16)
#define RC100_BTN_2 (32)
#define RC100_BTN_3 (64)
#define RC100_BTN_4 (128)
#define RC100_BTN_5 (256)
#define RC100_BTN_6 (512)
/////////////////////////////


#define DXL_SERIAL Serial3
#define DEBUG_SERIAL Serial1


#define PumpAndValve D12    //пин для управления насосом и присоской
bool PumpState = 0;         //переменная - переключатель для работы насоса и присоски

int x = 0;
int y = 0;                  //конечные координаты
int z= -165;


int X0 = 0;
int Y0 = 0;                 //начальные координаты
int Z0= -165;

bool started = 0;            //переменные - переключатели для начала работы и переключения демо режима и прямого управления
bool demoMode = 0;

const uint8_t DXL_DIR_PIN = 22;
const float DXL_PROTOCOL_VERSION = 1.0;

Dynamixel2Arduino dxl(DXL_SERIAL, DXL_DIR_PIN);
int joint1 = 2;
int joint2 = 3;
int joint3 = 1;
int status = 0;
int velocity = 255;

const float COEf = 11.375;  // (4095 / 360) Коэффициент преобразования угла от диапазона (0 - 360) в (0 - 4095)
const int MiDDLE_POS = 180; // среднее положение привода (в градусах)

// размеры манипулятора
// (обозначения см. на схеме)
const float e = 90;      // сторона подвижной платформы
const float f = 300;     // сторона неподвижного основания
const float re = 270.0;  // длина нижнего рычага
const float rf = 110.0;  // длина верхнего рычага

// тригонометрические константы
const float sqrt3 = sqrt(3.0);
const float pi = 3.141592653;    // PI
const float sin120 = sqrt3/2.0;
const float cos120 = -0.5;
const float tan60 = sqrt3;
const float sin30 = 0.5;
const float tan30 = 1/sqrt3;


/******************************************/
// прямая кинематика:(theta1, theta2, theta3) -> (x0, y0, z0)
// возвращаемый статус: 0=OK, -1=несуществующая позиция
int delta_calcForward(float theta1, float theta2, float theta3, float &x0, float &y0, float &z0) 
{
    float t = (f-e)*tan30/2;
    float dtr = pi/(float)180.0;

    theta1 *= dtr;
    theta2 *= dtr;
    theta3 *= dtr;

    float y1 = -(t + rf*cos(theta1));
    float z1 = -rf*sin(theta1);

    float y2 = (t + rf*cos(theta2))*sin30;
    float x2 = y2*tan60;
    float z2 = -rf*sin(theta2);

    float y3 = (t + rf*cos(theta3))*sin30;
    float x3 = -y3*tan60;
    float z3 = -rf*sin(theta3);

    float dnm = (y2-y1)*x3-(y3-y1)*x2;

    float w1 = y1*y1 + z1*z1;
    float w2 = x2*x2 + y2*y2 + z2*z2;
    float w3 = x3*x3 + y3*y3 + z3*z3;

    // x = (a1*z + b1)/dnm
    float a1 = (z2-z1)*(y3-y1)-(z3-z1)*(y2-y1);
    float b1 = -((w2-w1)*(y3-y1)-(w3-w1)*(y2-y1))/2.0;

    // y = (a2*z + b2)/dnm;
    float a2 = -(z2-z1)*x3+(z3-z1)*x2;
    float b2 = ((w2-w1)*x3 - (w3-w1)*x2)/2.0;

    // a*z^2 + b*z + c = 0
    float a = a1*a1 + a2*a2 + dnm*dnm;
    float b = 2*(a1*b1 + a2*(b2-y1*dnm) - z1*dnm*dnm);
    float c = (b2-y1*dnm)*(b2-y1*dnm) + b1*b1 + dnm*dnm*(z1*z1 - re*re);

    // дискриминант
    float d = b*b - (float)4.0*a*c;
    if (d < 0) return -1; // несуществующая позиция

    z0 = -(float)0.5*(b+sqrt(d))/a;
    x0 = (a1*z0 + b1)/dnm;
    y0 = (a2*z0 + b2)/dnm;
    return 0;
}

// обратная кинематика
// вспомогательная функция, расчет угла theta1 (в плоскости YZ)
int delta_calcAngleYZ(float x0, float y0, float z0, float &theta) 
{
    float y1 = -0.5 * 0.57735 * f; // f/2 * tg 30
    y0 -= 0.5 * 0.57735 * e;       // сдвигаем центр к краю
    // z = a + b*y
    float a = (x0*x0 + y0*y0 + z0*z0 +rf*rf - re*re - y1*y1)/(2*z0);
    float b = (y1-y0)/z0;
    // дискриминант
    float d = -(a+b*y1)*(a+b*y1)+rf*(b*b*rf+rf);
    if (d < 0) return -1; // несуществующая точка
    float yj = (y1 - a*b - sqrt(d))/(b*b + 1); // выбираем внешнюю точку
    float zj = a + b*yj;
    theta = 180.0*atan(-zj/(y1 - yj))/pi + ((yj>y1)?180.0:0.0);
    return 0;
}

// обратная кинематика: (x0, y0, z0) -> (theta1, theta2, theta3)
// возвращаемый статус: 0=OK, -1=несуществующая позиция
int delta_calcInverse(float x0, float y0, float z0, float &theta1, float &theta2, float &theta3) 
{
    theta1 = theta2 = theta3 = 0;
    int status = delta_calcAngleYZ(x0, y0, z0, theta1);
    if (status == 0) status = delta_calcAngleYZ(x0*cos120 + y0*sin120, y0*cos120-x0*sin120, z0, theta2);  // rotate coords to +120 deg
    if (status == 0) status = delta_calcAngleYZ(x0*cos120 - y0*sin120, y0*cos120+x0*sin120, z0, theta3);  // rotate coords to -120 deg
    return status;
}
/******************************************/

/******************************************/
// функция перемещает рабочий конец манипулятора в заданную координату. 
// Возвращает 0 если отработает успешно и -1 если невозможно переместиться в заданную точку
int MoveTo(int velocity, float x, float y, float z)
{
  if( abs(y) > 200 - (1 / sqrt3) * abs(x) || abs(x) > 100*sqrt3 || z > -165 || z < -255 ) return -1;

  
  float theta1, theta2, theta3;

  int status;
  status = delta_calcInverse(-x, y, z, theta1, theta2, theta3);
  if (status != 0) return -1;

  theta1 = (theta1 + MiDDLE_POS)*COEf;
  theta2 = (theta2 + MiDDLE_POS)*COEf;
  theta3 = (theta3 + MiDDLE_POS)*COEf;

  dxl.setGoalVelocity(joint1, velocity);
  dxl.setGoalVelocity(joint2, velocity);
  dxl.setGoalVelocity(joint3, velocity);
  
  dxl.setGoalPosition(joint1, theta1);
  dxl.setGoalPosition(joint2, theta2);
  dxl.setGoalPosition(joint3, theta3);

  X0 = x;
  Y0 = y;
  Z0 = z;
  
  return 0;
}
/******************************************/

/******************************************/
// Эта функция перемещает рабочий конец манипулятора в заданную координату (перемещает плавно и по прямой линии)
// Разбивает прямую на отрезки и двигается отдельно по каждой
// Возвращает 0 если отработает успешно и -1 если невозможно переместиться в заданную точку
int particularMove(int velosity, float x, float y, float z)
{
  if( abs(y) > 200 - (1 / sqrt3) * abs(x) || abs(x) > 100*sqrt3 || z > -165 || z < -255 ) return -1;

  float X00 = X0, Y00 = Y0, Z00 = Z0;
  
  float deltaX = (x - X0);
  float deltaY = (y - Y0);
  float deltaZ = (z - Z0);
  
  int steps = 0;

  steps = abs(min(min(deltaX, deltaY), deltaZ));
  if(steps == 0)
  {
    if(deltaX == 0)
    {
      steps = abs(min(abs(deltaZ), abs(deltaY)));
      if(steps == 0) steps = max(abs(deltaZ), abs(deltaY));
    }
    else if(deltaY == 0)
    {
      steps = abs(min(abs(deltaZ), abs(deltaX)));
      if(steps == 0) steps = max(abs(deltaZ), abs(deltaX));
    }
    else if(deltaZ == 0)
    {
      steps = abs(min(abs(deltaX), abs(deltaY)));
      if(steps == 0) steps = max(abs(deltaX), abs(deltaY));
    }
  }
  
  
  for(int i = 0; i < steps; i++)
  {
    X00 += deltaX / (float)steps;
    Y00 += deltaY / (float)steps;
    Z00 += deltaZ / (float)steps;
    
    if(MoveTo(velosity, X00, Y00, Z00) == -1) return -1;
    X0 = X00;
    Y0 = Y00;
    Z0 = Z00;
  }
  return MoveTo(velosity, x, y, z);
}
/******************************************/


/******************************************/
// Демонстрационный режим. Перемещает рабочий конец манипулятора по шестиугольнику, образующему рабочую область
int DemonstrationMode()
{ 
   int velocity = 255;       //x              y         z
   
   particularMove(velocity,   0,             0,       -165);
   particularMove(velocity,   0,             200-1,   -165);
   particularMove(velocity,   100*sqrt3-1,   100-1,   -165);
   particularMove(velocity,   100*sqrt3-1,  -100+1,   -165);
   particularMove(velocity,   0,            -200+1,   -165);
   particularMove(velocity,  -100*sqrt3+1,  -100+1,   -165);
   particularMove(velocity,  -100*sqrt3+1,   100-1,   -165);
   particularMove(velocity,   0,             200-1,   -165);
   particularMove(velocity,   0,             0,       -165);
   particularMove(velocity,   0,             0,       -240);
   particularMove(velocity,   0,             200-1,   -240);
   particularMove(velocity,   100*sqrt3-1,   100-1,   -240);
   particularMove(velocity,   100*sqrt3-1,  -100+1,   -240);
   particularMove(velocity,   0,            -200+1,   -240);
   particularMove(velocity,  -100*sqrt3+1,  -100+1,   -240);
   particularMove(velocity,  -100*sqrt3+1,   100-1,   -240);
   particularMove(velocity,   0,             200-1,   -240);
    particularMove(velocity,   0,             0,       -165);
   
   return 0;
}
/******************************************/

void setup()
{
  Serial.begin(57600);
  RemoteController.begin(2);

  DEBUG_SERIAL.begin(57600);
  dxl.begin(1000000);
  dxl.setPortProtocolVersion(DXL_PROTOCOL_VERSION);
  dxl.setOperatingMode(joint1, OP_POSITION);
  dxl.setOperatingMode(joint2, OP_POSITION);
  dxl.setOperatingMode(joint3, OP_POSITION);
  pinMode(PumpAndValve, OUTPUT);
}

void loop()
{
  if(!started)      //Начало работы - перемещение в начальную точку
  {
    particularMove(X0, X0, Y0, Z0);
    x = X0;
    y = Y0;
    z = Z0;
    started = 1;
  }
  if(PumpState) digitalWrite(PumpAndValve, HIGH);
  else digitalWrite(PumpAndValve, LOW);
  
  if(demoMode) demoMode = DemonstrationMode();
  
  /************************************/
  
  if(started)
  {
    int movingStep = 5;                                 //Считывание сигнала с контроллера и прибавление
    if(RemoteController.available())                   
    {
      RcvData = RemoteController.readData();
      if(RcvData == RC100_BTN_5) PumpState = 1;
      else if(RcvData == RC100_BTN_6) PumpState = 0;
      else if(RcvData == (RC100_BTN_1 | RC100_BTN_4)) demoMode = 1;
      else if(RcvData == RC100_BTN_U) y += movingStep;
      else if(RcvData == RC100_BTN_D) y-= movingStep;
      else if(RcvData == RC100_BTN_R) x+=movingStep;
      else if(RcvData == RC100_BTN_L) x-= movingStep;
      else if(RcvData == RC100_BTN_1) z+= movingStep;
      else if(RcvData == RC100_BTN_3) z-= movingStep;
      else if(RcvData == (RC100_BTN_U | RC100_BTN_R))
      {
        x +=movingStep;
        y +=movingStep;
      }
      else if(RcvData == (RC100_BTN_U | RC100_BTN_L))
      {
        x -= movingStep;
        y +=movingStep;
      }
      else if(RcvData == (RC100_BTN_D | RC100_BTN_L))
      {
        x -= movingStep;
        y -= movingStep;
      }
      else if(RcvData == (RC100_BTN_D | RC100_BTN_R))
      {
        x +=movingStep;
        y -= movingStep;
      }

      if(particularMove(velocity, x, y, z) == -1)           //Если кооррдинаты вышли за рабочую область,
      {                                                     //то возвращаем их к прежнему значению
        if(RcvData == RC100_BTN_U) y -= movingStep;
        else if(RcvData == RC100_BTN_D) y +=movingStep;
        else if(RcvData == RC100_BTN_R) x-= movingStep;
        else if(RcvData == RC100_BTN_L) x+=movingStep;
        else if(RcvData == RC100_BTN_1) z-= movingStep;
        else if(RcvData == RC100_BTN_3) z+= movingStep;
        else if(RcvData == (RC100_BTN_U | RC100_BTN_R))
        {
          x -= movingStep;
          y -= movingStep;
        }
        else if(RcvData == (RC100_BTN_U | RC100_BTN_L))
        {
          x +=movingStep;
          y -= movingStep;
        }
        else if(RcvData == (RC100_BTN_D | RC100_BTN_L))
        {
          x +=movingStep;
          y +=movingStep;
        }
        else if(RcvData == (RC100_BTN_D | RC100_BTN_R))
        {
          x -= movingStep;
          y +=movingStep;
        }
        particularMove(velocity, x, y, z);
        X0 = x;
        Y0 = y;
        Z0 = z;
        particularMove(velocity, x, y, z);
        return;
        
      }
      X0 = x;
      Y0 = y;
      Z0 = z;
    }
  }
}
